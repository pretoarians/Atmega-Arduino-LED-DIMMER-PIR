
// Debug mode - set to true to enable serial logging
const bool DEBUG_MODE = false;

// Set this to the pin connected to the PIR motion sensor
const byte PIN_CZUJNIKA_RUCHU = 2;  // Changed to pin 2 for PIR

// Set this to the pin supplying power to the LED control board ICs (PWM for LED)
const byte PIN_ZARZADZANIA_LED = 9;  // Changed to pin 9 for PWM control

// Set this to change the power-off delay (in seconds)
const unsigned long CZAS_OPUZNIENIA_WYLACZENIA_SEKUNDY = 60;  // Changed to 30 seconds

// Configuration for lighting times
const unsigned long CZAS_SWIECENIA_PO_WYKRYCIU_RUCHU_MS = 300000;  // Time after motion detection (60 seconds) in milliseconds
const unsigned long CZAS_SWIECENIA_W_STANDBY_MS = 600000;  // Time in standby mode (60 seconds) in milliseconds

// Declare global variables for control
int PWM_AKTUALNE = 0;          // Global variable for PWM value
int MAX_PWM_DZIENNE = 220;     // Global variable for MAX PWM during the day
int PWM_STANDBY = 5;          // Global variable for Standby PWM



unsigned long CZAS_WLACZENIA_MS = 0;  // Global variable for time when the LEDs were turned on (in milliseconds)
unsigned long CZAS_BIEZACY_MS = 0;    // Global variable for the current time (in milliseconds)
unsigned long CZAS_OD_WYKRYCIA_RUCHU_MS = 0;  // Global variable for time since last motion detection (in milliseconds)
unsigned long CZAS_OSTATNIEGO_SPRAWDZENIA_RUCHU_MS = 0;  // Additional variable to track last motion check time (in milliseconds)

// Set up the pins connected to the motion sensor and supplying power to the LED controller.
void setup() {
    pinMode(PIN_CZUJNIKA_RUCHU, INPUT);
    digitalWrite(PIN_CZUJNIKA_RUCHU, HIGH);  // Enable pull-up resistor (optional)

    pinMode(PIN_ZARZADZANIA_LED, OUTPUT);
    digitalWrite(PIN_ZARZADZANIA_LED, LOW);
    analogWrite(PIN_ZARZADZANIA_LED, 0);  // Start with LED off (PWM 0)

    if (DEBUG_MODE) {
        Serial.begin(9600);  // Initialize the serial port at 9600 baud rate
    }
}

// Function to brighten from current PWM to MAX_PWM_DZIENNE within 5 seconds
void Shine_from_current_point_within_5SEC() {
    int durationMS = 5000;  // Duration of brightening in milliseconds (5 seconds)
    int stepDelay = durationMS / (MAX_PWM_DZIENNE - PWM_AKTUALNE);

    if (stepDelay < 5) {
        stepDelay = 5;  // Minimum delay to prevent too fast increments
    }

    for (int pwmValue = PWM_AKTUALNE; pwmValue <= MAX_PWM_DZIENNE; pwmValue++) {
        PWM_AKTUALNE = pwmValue;
        analogWrite(PIN_ZARZADZANIA_LED, PWM_AKTUALNE);
        delay(stepDelay);
    }
}

// Main loop of the program
void loop() {
    static const unsigned long CZAS_OPUZNIENIA_WYLACZENIA_MS = CZAS_OPUZNIENIA_WYLACZENIA_SEKUNDY * 1000UL;
    CZAS_BIEZACY_MS = millis();
    CZAS_OD_WYKRYCIA_RUCHU_MS = CZAS_BIEZACY_MS - CZAS_WLACZENIA_MS;

    // Debugging: Log key variables if debug mode is enabled
    if (DEBUG_MODE) {
        Serial.print("CZAS_OSTATNIEGO_SPRAWDZENIA_RUCHU_MS: ");
        Serial.print(CZAS_OSTATNIEGO_SPRAWDZENIA_RUCHU_MS);
        Serial.print(", CZAS_BIEZACY_MS: ");
        Serial.print(CZAS_BIEZACY_MS);
        Serial.print(", CZAS_OD_WYKRYCIA_RUCHU_MS: ");
        Serial.println(CZAS_OD_WYKRYCIA_RUCHU_MS);
    }

    // Motion detection check
    if (digitalRead(PIN_CZUJNIKA_RUCHU) == HIGH) {   // // Wykryto ruch, kod wykonuje odpowiednie akcje
        CZAS_WLACZENIA_MS = CZAS_BIEZACY_MS;
        CZAS_OSTATNIEGO_SPRAWDZENIA_RUCHU_MS = CZAS_BIEZACY_MS;

        if (DEBUG_MODE) {
            Serial.println("| Motion Detected |");
            Serial.print("Motion detected at: ");
            Serial.println(CZAS_BIEZACY_MS);
        }
          if (PWM_AKTUALNE <= 0 || PWM_AKTUALNE < MAX_PWM_DZIENNE) {  // Jeśli jasność LED jest równa 0 lub mniejsza od maksymalnej jasności
       // if (PWM_AKTUALNE == 0) {
            Shine_from_current_point_within_5SEC();
        } else {
            PWM_AKTUALNE = MAX_PWM_DZIENNE;
            analogWrite(PIN_ZARZADZANIA_LED, PWM_AKTUALNE);
        }
    }

    // Obsługuje czas bezczynności po wykryciu ruchu
if (CZAS_OD_WYKRYCIA_RUCHU_MS >= CZAS_SWIECENIA_PO_WYKRYCIU_RUCHU_MS && CZAS_OD_WYKRYCIA_RUCHU_MS < CZAS_SWIECENIA_PO_WYKRYCIU_RUCHU_MS + CZAS_SWIECENIA_W_STANDBY_MS) {
    // Jeśli debugowanie jest włączone, wypisuje informację o włączeniu trybu STANDBY
    if (DEBUG_MODE) {
        Serial.println("| STANDBY ON |");
    }

    // Jeśli aktualna jasność LED nie jest równa jasności standby (PWM_STANDBY)
    if (PWM_AKTUALNE != PWM_STANDBY) {
        // Zmniejsza wartość PWM o 3, ale nie mniej niż wartość PWM_STANDBY (10)
        PWM_AKTUALNE = max(PWM_AKTUALNE - 3, PWM_STANDBY);

        // Ustawia nową wartość PWM na pinie sterującym LED (po zmniejszeniu jasności)
        analogWrite(PIN_ZARZADZANIA_LED, PWM_AKTUALNE);

           // Dodanie opóźnienia, aby ściemnianie było wolniejsze   // adddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
          delay(50); // opóźnienie w milisekundach (np. 50 ms)// adddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

        // Jeśli debugowanie jest włączone, wypisuje wartość aktualnego PWM po zmianie
        if (DEBUG_MODE) {
            Serial.print("PWM_AKTUALNE after standby: ");
            Serial.println(PWM_AKTUALNE);
        }
    }
} else if (CZAS_OD_WYKRYCIA_RUCHU_MS >= CZAS_SWIECENIA_PO_WYKRYCIU_RUCHU_MS + CZAS_SWIECENIA_W_STANDBY_MS) {
    // Jeśli debugowanie jest włączone, wypisuje informację o włączeniu trybu POWER OFF
    if (DEBUG_MODE) {
        Serial.println("| POWER OFF |");
    }

    // Jeśli aktualna jasność LED nie jest równa 0 (czyli LED jest wciąż włączony)
    if (PWM_AKTUALNE != 0) {
        // Zmniejsza wartość PWM o 3, ale nie mniej niż 0 (czyli LED zostanie całkowicie wyłączony)
        PWM_AKTUALNE = max(PWM_AKTUALNE - 3, 0);

        // Ustawia nową wartość PWM na pinie sterującym LED (po zmniejszeniu jasności)
        analogWrite(PIN_ZARZADZANIA_LED, PWM_AKTUALNE);
          // Dodanie opóźnienia, aby ściemnianie było wolniejsze   // adddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
          delay(50); // opóźnienie w milisekundach (np. 50 ms)// adddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

        // Jeśli debugowanie jest włączone, wypisuje wartość aktualnego PWM po zmianie
        if (DEBUG_MODE) {
            Serial.print("PWM_AKTUALNE after power off: ");
            Serial.println(PWM_AKTUALNE);
        }
    }
}


    // Debugging: Log status
    if (DEBUG_MODE) {
        Serial.print("PIN_CZUJNIKA_RUCHU: ");
        Serial.print(PIN_CZUJNIKA_RUCHU);
        Serial.print(", PIN_ZARZADZANIA_LED: ");
        Serial.print(PIN_ZARZADZANIA_LED);
        Serial.print(", CZAS_OPUZNIENIA_WYLACZENIA_SEKUNDY: ");
        Serial.print(CZAS_OPUZNIENIA_WYLACZENIA_SEKUNDY);
        Serial.print(", CZAS_OPUZNIENIA_WYLACZENIA_MS: ");
        Serial.print(CZAS_OPUZNIENIA_WYLACZENIA_MS);
        Serial.print(", PWM_AKTUALNE: ");
        Serial.print(PWM_AKTUALNE);
        Serial.print(", MAX_PWM_DZIENNE: ");
        Serial.print(MAX_PWM_DZIENNE);
        Serial.print(", PWM_STANDBY: ");
        Serial.print(PWM_STANDBY);
        Serial.print(", CZAS_WLACZENIA_MS: ");
        Serial.print(CZAS_WLACZENIA_MS);
        Serial.print(", CZAS_BIEZACY_MS: ");
        Serial.print(CZAS_BIEZACY_MS);
        Serial.print(", CZAS_OD_WYKRYCIA_RUCHU_MS: ");
        Serial.println(CZAS_OD_WYKRYCIA_RUCHU_MS);
        // delay(1000); 
    }
}
